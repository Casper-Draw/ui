"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Badge } from "./ui/badge";
import {
  Ticket,
  Wallet,
  Zap,
  Sparkles,
  TrendingUp,
  Trophy,
  ArrowRight,
} from "lucide-react";
import { toast } from "sonner";
import { motion } from "framer-motion";
import { formatNumber } from "@/lib/formatNumber";

interface EnterLotteryProps {
  onNavigate: (page: string) => void;
  onEntrySubmit: (entry: {
    requestId: string;
    playId: string;
    roundId: number;
    entryDate: string;
    cost: number;
    status: "pending";
  }) => void;
}

export function EnterLottery({ onNavigate, onEntrySubmit }: EnterLotteryProps) {
  const [isConnected, setIsConnected] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  // Contract configuration (these would come from smart contract queries)
  const ticketPrice = 50; // CSPR
  const lotteryFee = 1; // CSPR
  const prizePool = 12500; // CSPR
  const jackpotProbability = 10; // 10%
  const consolationProbability = 25; // 25%
  const maxConsolationPrize = 50; // CSPR
  const currentRound = 1;
  const currentPlayId = 1;

  const handleConnectWallet = () => {
    setIsConnected(true);
    toast.success("Wallet connected! ðŸŽ°", {
      style: {
        background: "#1a0f2e",
        color: "#00ffff",
        border: "2px solid #00ffff",
      },
    });
  };

  const handleBuyTicket = () => {
    if (!isConnected) {
      toast.error("Please connect your wallet first", {
        style: {
          background: "#1a0f2e",
          color: "#ff00ff",
          border: "2px solid #ff00ff",
        },
      });
      return;
    }

    setIsProcessing(true);

    // Simulate Casper Network transaction
    setTimeout(() => {
      const requestId = `0x${Math.random().toString(16).substr(2, 16)}`;
      const playId = `${currentPlayId}`;
      const entry = {
        requestId,
        playId,
        roundId: currentRound,
        entryDate: new Date().toISOString(),
        cost: ticketPrice,
        status: "pending" as const,
      };

      onEntrySubmit(entry);
      setIsProcessing(false);

      toast.success("Ticket purchased! Awaiting randomness...", {
        description: `Request ID: ${requestId.substring(0, 10)}...`,
        style: {
          background: "#1a0f2e",
          color: "#ffd700",
          border: "2px solid #ffd700",
        },
      });

      // Navigate to dashboard to see pending ticket
      setTimeout(() => {
        onNavigate("dashboard");
      }, 1500);
    }, 2000);
  };

  return (
    <div className="min-h-screen py-4 md:py-8 px-3 md:px-4">
      <div className="max-w-5xl mx-auto w-full">
        <motion.div
          className="mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h1 className="neon-text-pink text-[#E91E63] mb-4 text-3xl md:text-[40px]">
            Let&apos;s Play!
          </h1>
          <p className="text-white text-base md:text-xl mb-2">
            Instant lottery with quantum-backed randomness
          </p>
          <p className="text-gray-400 text-sm md:text-base">
            Buy ticket â†’ Wait for Autonom RNG â†’ Settle & win!
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-6 lg:items-start">
          {/* Main Buy Ticket Card */}
          <div className="lg:col-span-2 h-full">
            <Card className="bg-black/40 border-2 border-pink-500/50 neon-glow-pink h-full flex flex-col">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Sparkles className="w-5 h-5 text-[#E91E63]" />
                  Buy Your Draw Ticket
                  <Sparkles className="w-5 h-5 text-[#E91E63]" />
                </CardTitle>
                <CardDescription className="text-gray-400">
                  Get your ticket in the Casper Draw and let Autonom RNG decide
                  your prize!
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6 flex-1 flex flex-col justify-between">
                {/* How It Works */}
                <div className="bg-black/30 rounded-xl p-4 md:p-6 border border-cyan-500/30">
                  <h3 className="text-white text-sm md:text-base mb-3 md:mb-4 flex items-center gap-2">
                    <Zap className="w-4 h-4 md:w-5 md:h-5 text-cyan-400" />
                    How It Works
                  </h3>
                  <div className="space-y-2 md:space-y-3">
                    <div className="flex items-start gap-2 md:gap-3">
                      <div className="w-6 h-6 md:w-8 md:h-8 rounded-full bg-[#E91E63] flex items-center justify-center flex-shrink-0 text-xs md:text-base">
                        1
                      </div>
                      <div>
                        <p className="text-white text-sm md:text-base">
                          Buy Ticket
                        </p>
                        <p className="text-xs md:text-sm text-gray-400">
                          Pay {formatNumber(ticketPrice)} CSPR to enter Casper
                          Draw
                        </p>
                      </div>
                    </div>
                    <div className="flex items-start gap-2 md:gap-3">
                      <div className="w-6 h-6 md:w-8 md:h-8 rounded-full bg-[#E91E63] flex items-center justify-center flex-shrink-0 text-xs md:text-base">
                        2
                      </div>
                      <div>
                        <p className="text-white text-sm md:text-base">
                          Wait for Randomness
                        </p>
                        <p className="text-xs md:text-sm text-gray-400">
                          Autonom RNG generates your result
                        </p>
                      </div>
                    </div>
                    <div className="flex items-start gap-2 md:gap-3">
                      <div className="w-6 h-6 md:w-8 md:h-8 rounded-full bg-[#E91E63] flex items-center justify-center flex-shrink-0 text-xs md:text-base">
                        3
                      </div>
                      <div>
                        <p className="text-white text-sm md:text-base">
                          Settle & Win
                        </p>
                        <p className="text-xs md:text-sm text-gray-400">
                          Claim your ticket to reveal your prize
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Win Probabilities */}
                <div className="bg-black/30 rounded-xl p-4 md:p-6 border border-[#E91E63]/30">
                  <h3 className="text-white text-sm md:text-base mb-3 md:mb-4 flex items-center gap-2">
                    <Trophy className="w-4 h-4 md:w-5 md:h-5 text-[#E91E63]" />
                    Win Probabilities
                  </h3>
                  <div className="space-y-2 md:space-y-3">
                    <div className="flex items-center justify-between gap-2">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-yellow-400 neon-glow-yellow flex-shrink-0"></div>
                        <span className="text-white text-sm md:text-base">
                          Jackpot
                        </span>
                      </div>
                      <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-500/50 text-xs md:text-sm whitespace-nowrap">
                        {jackpotProbability}% chance
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between gap-2">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-cyan-400 neon-glow-cyan flex-shrink-0"></div>
                        <span className="text-white text-sm md:text-base">
                          Consolation Prize
                        </span>
                      </div>
                      <Badge className="bg-cyan-500/20 text-cyan-300 border-cyan-500/50 text-xs md:text-sm whitespace-nowrap">
                        {consolationProbability}% chance
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between gap-2">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full bg-gray-400 flex-shrink-0"></div>
                        <span className="text-white text-sm md:text-base">
                          No Win
                        </span>
                      </div>
                      <Badge className="bg-gray-500/20 text-gray-300 border-gray-500/50 text-xs md:text-sm whitespace-nowrap">
                        {100 - jackpotProbability - consolationProbability}%
                        chance
                      </Badge>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                {!isConnected ? (
                  <Button
                    onClick={handleConnectWallet}
                    className="w-full casino-gradient neon-glow-pink hover:scale-105 transition-transform h-14 cursor-pointer text-white rounded-xl"
                    style={{
                      textShadow:
                        "0 2px 8px rgba(0,0,0,0.8), 0 1px 4px rgba(0,0,0,0.9)",
                    }}
                  >
                    <Wallet
                      className="w-5 h-5 mr-2"
                      style={{
                        filter:
                          "drop-shadow(0 2px 8px rgba(0,0,0,0.8)) drop-shadow(0 1px 4px rgba(0,0,0,0.9))",
                      }}
                    />
                    Connect Casper Wallet
                  </Button>
                ) : (
                  <Button
                    onClick={handleBuyTicket}
                    disabled={isProcessing}
                    className="w-full casino-gradient neon-glow-yellow hover:scale-105 transition-transform h-14 cursor-pointer text-white rounded-xl"
                    style={{
                      textShadow:
                        "0 2px 8px rgba(0,0,0,0.8), 0 1px 4px rgba(0,0,0,0.9)",
                    }}
                  >
                    {isProcessing ? (
                      <>
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{
                            duration: 1,
                            repeat: Infinity,
                            ease: "linear",
                          }}
                        >
                          <Zap
                            className="w-5 h-5 mr-2"
                            style={{
                              filter:
                                "drop-shadow(0 2px 8px rgba(0,0,0,0.8)) drop-shadow(0 1px 4px rgba(0,0,0,0.9))",
                            }}
                          />
                        </motion.div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Ticket
                          className="w-5 h-5 mr-2"
                          style={{
                            filter:
                              "drop-shadow(0 2px 8px rgba(0,0,0,0.8)) drop-shadow(0 1px 4px rgba(0,0,0,0.9))",
                          }}
                        />
                        Buy Ticket for {formatNumber(ticketPrice)} CSPR
                        <ArrowRight
                          className="w-5 h-5 ml-2"
                          style={{
                            filter:
                              "drop-shadow(0 2px 8px rgba(0,0,0,0.8)) drop-shadow(0 1px 4px rgba(0,0,0,0.9))",
                          }}
                        />
                      </>
                    )}
                  </Button>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Summary Sidebar */}
          <div className="lg:col-span-1 h-full">
            <Card className="sticky top-4 bg-black/40 border-2 border-cyan-500/50 neon-glow-cyan h-full flex flex-col">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Trophy className="w-5 h-5" />
                  Prize Info
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6 flex-1 flex flex-col justify-between">
                {/* Current Jackpot */}
                <div className="bg-black/30 rounded-xl p-3 md:p-4 border border-yellow-500/30">
                  <div className="text-center">
                    <p
                      className="text-white text-xs md:text-sm mb-2"
                      style={{ fontWeight: 800 }}
                    >
                      Current Jackpot
                    </p>
                    <motion.div
                      className="text-2xl md:text-3xl text-yellow-300 neon-text-yellow mb-1"
                      animate={{
                        filter: [
                          "drop-shadow(0 0 30px rgba(253, 224, 71, 1)) drop-shadow(0 0 60px rgba(253, 224, 71, 0.8)) drop-shadow(0 0 90px rgba(253, 224, 71, 0.6))",
                          "drop-shadow(0 0 50px rgba(253, 224, 71, 1)) drop-shadow(0 0 100px rgba(253, 224, 71, 1)) drop-shadow(0 0 150px rgba(253, 224, 71, 0.8))",
                          "drop-shadow(0 0 50px rgba(253, 224, 71, 1)) drop-shadow(0 0 100px rgba(253, 224, 71, 1)) drop-shadow(0 0 150px rgba(253, 224, 71, 0.8))",
                          "drop-shadow(0 0 30px rgba(253, 224, 71, 1)) drop-shadow(0 0 60px rgba(253, 224, 71, 0.8)) drop-shadow(0 0 90px rgba(253, 224, 71, 0.6))",
                        ],
                      }}
                      transition={{
                        duration: 2.5,
                        times: [0, 0.4, 0.6, 1],
                        repeat: Infinity,
                      }}
                    >
                      {formatNumber(prizePool)} CSPR
                    </motion.div>
                    <p
                      className="text-[10px] md:text-xs text-white"
                      style={{ fontWeight: 800 }}
                    >
                      Win 100% of prize pool!
                    </p>
                  </div>
                </div>

                {/* Consolation Prize Range */}
                <div className="bg-black/30 rounded-xl p-3 md:p-4 border border-cyan-500/30">
                  <div className="text-center">
                    <p className="text-gray-400 text-xs md:text-sm mb-2">
                      Consolation Prize
                    </p>
                    <div className="text-lg md:text-xl text-cyan-300 neon-text-cyan mb-1">
                      Up to {formatNumber(maxConsolationPrize)} CSPR
                    </div>
                    <p className="text-[10px] md:text-xs text-white/70">
                      Variable amount
                    </p>
                  </div>
                </div>

                {/* Ticket Breakdown */}
                <div className="space-y-2 md:space-y-3 bg-black/30 rounded-xl p-3 md:p-4 border border-pink-500/30">
                  <div className="flex justify-between text-gray-400 text-xs md:text-sm">
                    <span>Ticket Price</span>
                    <span className="text-white">
                      {formatNumber(ticketPrice)} CSPR
                    </span>
                  </div>
                  <div className="flex justify-between text-gray-400 text-xs md:text-sm">
                    <span>Lottery Fee</span>
                    <span className="text-white/70">
                      {formatNumber(lotteryFee)} CSPR
                    </span>
                  </div>
                  <div className="border-t border-purple-500/30 pt-2 flex justify-between text-xs md:text-sm">
                    <span className="text-white">To Prize Pool</span>
                    <span className="text-cyan-300">
                      {formatNumber(ticketPrice - lotteryFee)} CSPR
                    </span>
                  </div>
                </div>

                {/* Round Info */}
                <div className="bg-black/30 rounded-xl p-3 md:p-4 border border-pink-500/30">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400 text-xs md:text-sm">
                      Current Round
                    </span>
                    <Badge className="bg-pink-500/20 text-pink-300 border-pink-500/50 text-xs md:text-sm">
                      #{currentRound}
                    </Badge>
                  </div>
                </div>

                {/* View Dashboard */}
                <Button
                  onClick={() => onNavigate("dashboard")}
                  variant="outline"
                  className="w-full border-2 border-cyan-400 text-cyan-400 bg-cyan-400/10 hover:bg-cyan-400/20 hover:text-cyan-400 neon-glow-cyan cursor-pointer"
                >
                  <TrendingUp className="w-4 h-4 mr-2" />
                  View My Tickets
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
