"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Badge } from "./ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
} from "./ui/dialog";
import {
  Ticket,
  Trophy,
  DollarSign,
  TrendingUp,
  Sparkles,
  Clock,
  CheckCircle2,
  XCircle,
  Zap,
} from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "sonner";
import { formatNumber } from "@/lib/formatNumber";

const jackpotGif = "/assets/69bb9862d8d20b48acde1b9ff6c23cc9a1a6af67.png";

interface LotteryEntry {
  requestId: string;
  playId: string;
  roundId: number;
  entryDate: string;
  cost: number;
  status: "pending" | "won-jackpot" | "won-consolation" | "lost";
  prizeAmount?: number;
  settledDate?: string;
}

interface DashboardProps {
  onNavigate: (page: string) => void;
  entries: LotteryEntry[];
  onWinningCelebration?: (entry: LotteryEntry) => void;
}

export function Dashboard({
  onNavigate,
  entries,
}: // onWinningCelebration,
DashboardProps) {
  const [settlingRequests, setSettlingRequests] = useState<Set<string>>(
    new Set()
  );
  const [showJackpotModal, setShowJackpotModal] = useState(false);
  const [jackpotPrizeAmount, setJackpotPrizeAmount] = useState(0);
  const [jackpotEntry, setJackpotEntry] = useState<LotteryEntry | null>(null);
  const [showConsolationModal, setShowConsolationModal] = useState(false);
  const [consolationEntry, setConsolationEntry] = useState<LotteryEntry | null>(
    null
  );

  // Separate entries by status
  const pendingEntries = entries.filter((e) => e.status === "pending");
  const settledEntries = entries.filter((e) => e.status !== "pending");
  const winnings = entries.filter(
    (e) => e.status === "won-jackpot" || e.status === "won-consolation"
  );

  // Calculate stats
  const totalWon = winnings.reduce(
    (sum, entry) => sum + (entry.prizeAmount || 0),
    0
  );
  const totalSpent = entries.reduce((sum, entry) => sum + entry.cost, 0);
  const netProfit = totalWon - totalSpent;

  const handleSettle = (entry: LotteryEntry) => {
    setSettlingRequests(new Set(settlingRequests).add(entry.requestId));

    // Simulate settle_lottery() call
    setTimeout(() => {
      // Deterministic outcome for demo based on playId to showcase all three outcomes
      // let status: "won-jackpot" | "won-consolation" | "lost";
      let prizeAmount = 0;

      // Play #1847 -> Lost (better luck next time)
      // Play #1846 -> Consolation prize
      // Play #1845 -> Jackpot
      if (entry.playId === "1845") {
        // Jackpot!
        // status = "won-jackpot";
        prizeAmount = 12500; // Entire prize pool
        const jackpotEntryData = {
          ...entry,
          status: "won-jackpot" as const,
          prizeAmount,
          settledDate: new Date().toISOString(),
        };
        setJackpotPrizeAmount(prizeAmount);
        setJackpotEntry(jackpotEntryData);
        setShowJackpotModal(true);
      } else if (entry.playId === "1846") {
        // Consolation prize
        // status = "won-consolation";
        prizeAmount = 350; // Fixed amount for demo
        const consolationEntryData = {
          ...entry,
          status: "won-consolation" as const,
          prizeAmount,
          settledDate: new Date().toISOString(),
        };
        setConsolationEntry(consolationEntryData);
        setShowConsolationModal(true);
      } else {
        // No win (Play #1847 and any other)
        // status = "lost";
        toast.info("Better luck next time!", {
          description: "You didn't win this time. Try again!",
          style: {
            background: "#1a0f2e",
            color: "#ff00ff",
            border: "2px solid #ff00ff",
          },
        });
      }

      // const updatedEntry: LotteryEntry = {
      //   ...entry,
      //   status,
      //   prizeAmount,
      //   settledDate: new Date().toISOString(),
      // };

      setSettlingRequests((prev) => {
        const next = new Set(prev);
        next.delete(entry.requestId);
        return next;
      });
    }, 2500);
  };

  return (
    <div className="min-h-screen py-4 md:py-8 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="mb-8 flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="neon-text-cyan text-cyan-300 mb-4 text-3xl md:text-[40px]">
              Dashboard
            </h1>
            <p className="text-white text-base md:text-xl">
              Track your draw tickets and winnings
            </p>
          </div>
          <Button
            onClick={() => onNavigate("enter")}
            className="casino-gradient neon-glow-pink hover:scale-105 transition-transform cursor-pointer text-[rgb(255,255,255)] rounded-xl"
            style={{
              textShadow:
                "0 2px 8px rgba(0,0,0,0.8), 0 1px 4px rgba(0,0,0,0.9)",
            }}
          >
            <Sparkles
              className="w-4 h-4 mr-2"
              style={{
                filter:
                  "drop-shadow(0 2px 8px rgba(0,0,0,0.8)) drop-shadow(0 1px 4px rgba(0,0,0,0.9))",
              }}
            />
            Buy New Ticket
          </Button>
        </div>

        {/* Stats Cards */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <motion.div
            whileHover={{ scale: 1.05, y: -5 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="h-full"
          >
            <Card className="bg-black/40 border-2 border-cyan-500/50 neon-glow-cyan h-full flex flex-col">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm md:text-base text-white">
                  Total Tickets
                </CardTitle>
                <Ticket className="w-5 h-5 md:w-6 md:h-6 text-cyan-400" />
              </CardHeader>
              <CardContent className="flex-1 flex flex-col justify-between">
                <div className="text-3xl md:text-5xl text-cyan-300 neon-text-cyan whitespace-nowrap">
                  {entries.length}
                </div>
                <p className="text-xs md:text-sm text-white mt-1">All time</p>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.05, y: -5 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="h-full"
          >
            <Card className="bg-black/40 border-2 border-yellow-500/50 neon-glow-yellow h-full flex flex-col">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm md:text-base text-white">
                  Total Won (CSPR)
                </CardTitle>
                <Trophy className="w-5 h-5 md:w-6 md:h-6 text-yellow-400" />
              </CardHeader>
              <CardContent className="flex-1 flex flex-col justify-between">
                <div className="text-3xl md:text-5xl text-yellow-300 neon-text-yellow whitespace-nowrap">
                  {formatNumber(totalWon)}
                </div>
                <p className="text-xs md:text-sm text-white mt-1">
                  {formatNumber(winnings.length)} winning tickets 🎉
                </p>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.05, y: -5 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="h-full"
          >
            <Card className="bg-black/40 border-2 border-[#E91E63]/50 neon-glow-pink h-full flex flex-col">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm md:text-base text-white">
                  Total Spent (CSPR)
                </CardTitle>
                <DollarSign className="w-5 h-5 md:w-6 md:h-6 text-[#E91E63]" />
              </CardHeader>
              <CardContent className="flex-1 flex flex-col justify-between">
                <div className="text-3xl md:text-5xl text-[#E91E63] neon-text-pink whitespace-nowrap">
                  {formatNumber(totalSpent)}
                </div>
                <p className="text-xs md:text-sm text-white mt-1">
                  On lottery tickets
                </p>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.05, y: -5 }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="h-full"
          >
            <Card
              className={`bg-black/40 border-2 ${
                netProfit >= 0
                  ? "border-green-500/50 neon-glow-green"
                  : "border-red-500/50 neon-glow-pink"
              } h-full flex flex-col`}
            >
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm md:text-base text-white">
                  Net Profit (CSPR)
                </CardTitle>
                <TrendingUp
                  className={`w-5 h-5 md:w-6 md:h-6 ${
                    netProfit >= 0 ? "text-green-400" : "text-red-400"
                  }`}
                />
              </CardHeader>
              <CardContent className="flex-1 flex flex-col justify-between">
                <div
                  className={`text-3xl md:text-5xl ${
                    netProfit >= 0
                      ? "text-green-400 neon-text-green"
                      : "text-red-400"
                  } whitespace-nowrap`}
                >
                  {netProfit >= 0 ? "+" : ""}
                  {formatNumber(Math.abs(netProfit))}
                </div>
                <p className="text-xs md:text-sm mt-1 text-white">
                  {netProfit >= 0 ? "You're winning! 🚀" : "Keep playing! 💪"}
                </p>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* Tabs */}
        <Tabs defaultValue="pending" className="space-y-6">
          <div className="flex justify-center md:justify-start">
            <TabsList className="bg-pink-900/50 border border-pink-500/50 w-full md:w-auto">
              <TabsTrigger
                value="pending"
                className="data-[state=active]:bg-[#E91E63]/20 !text-white flex-1 md:flex-initial text-xs md:text-sm"
              >
                <Clock className="w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2" />
                Pending ({pendingEntries.length})
              </TabsTrigger>
              <TabsTrigger
                value="history"
                className="data-[state=active]:bg-[#E91E63]/20 !text-white flex-1 md:flex-initial text-xs md:text-sm"
              >
                <Ticket className="w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2" />
                History ({settledEntries.length})
              </TabsTrigger>
            </TabsList>
          </div>

          {/* Pending Tickets */}
          <TabsContent value="pending" className="space-y-4">
            <Card className="bg-black/40 border-2 border-pink-500/50">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Clock className="w-5 h-5 text-cyan-400" />
                  Pending Tickets
                </CardTitle>
                <CardDescription className="text-gray-400">
                  Tickets ready to settle (purchased &gt; 1 minute ago) -
                  settlement completes within 1 minute!
                </CardDescription>
              </CardHeader>
              <CardContent>
                {pendingEntries.length === 0 ? (
                  <div className="text-center py-8 md:py-12">
                    <Ticket className="w-12 h-12 md:w-16 md:h-16 text-gray-600 mx-auto mb-4" />
                    <p className="text-gray-400 mb-4 text-base md:text-xl">
                      No pending tickets
                    </p>
                    <p className="text-gray-500 mb-6 text-sm md:text-base">
                      Buy a ticket to get started!
                    </p>
                    <Button
                      onClick={() => onNavigate("enter")}
                      className="casino-gradient neon-glow-pink cursor-pointer text-white rounded-xl"
                    >
                      <Sparkles className="w-4 h-4 mr-2" />
                      Buy Ticket
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {pendingEntries.map((entry) => (
                      <motion.div
                        key={entry.requestId}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        className="bg-black/30 rounded-xl p-3 md:p-4 border border-cyan-500/30 hover:border-cyan-500/60 transition-colors"
                      >
                        <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-3 md:gap-4">
                          <div className="flex-1 w-full md:w-auto">
                            <div className="flex items-center gap-1 md:gap-2 mb-2 flex-wrap">
                              <Badge className="bg-pink-500/20 text-pink-300 border-pink-500/50 text-xs">
                                Play #{entry.playId}
                              </Badge>
                              <Badge className="bg-pink-500/20 text-pink-300 border-pink-500/50 text-xs">
                                Round #{entry.roundId}
                              </Badge>
                              <Badge className="bg-cyan-500/20 text-cyan-300 border-cyan-500/50 animate-pulse text-xs">
                                <Clock className="w-3 h-3 mr-1" />
                                Pending
                              </Badge>
                            </div>
                            <div className="text-xs md:text-sm text-gray-400 space-y-1">
                              <div className="break-all">
                                Request ID:{" "}
                                <span className="text-cyan-300 font-mono text-[10px] md:text-xs">
                                  {entry.requestId.substring(0, 20)}...
                                </span>
                              </div>
                              <div className="text-xs">
                                Purchased:{" "}
                                {new Date(entry.entryDate).toLocaleString()}
                              </div>
                              <div>
                                Cost:{" "}
                                <span className="text-white">
                                  {formatNumber(entry.cost)} CSPR
                                </span>
                              </div>
                            </div>
                          </div>
                          <Button
                            onClick={() => handleSettle(entry)}
                            disabled={settlingRequests.has(entry.requestId)}
                            className="bg-[#E91E63] hover:bg-[#E91E63]/90 text-white hover:scale-105 transition-transform cursor-pointer w-full md:w-auto text-sm md:text-base whitespace-nowrap"
                          >
                            {settlingRequests.has(entry.requestId) ? (
                              <>
                                <motion.div
                                  animate={{ rotate: 360 }}
                                  transition={{
                                    duration: 1,
                                    repeat: Infinity,
                                    ease: "linear",
                                  }}
                                >
                                  <Zap className="w-4 h-4 mr-2" />
                                </motion.div>
                                Settling...
                              </>
                            ) : (
                              <>Check Results</>
                            )}
                          </Button>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* History */}
          <TabsContent value="history" className="space-y-4">
            <Card className="bg-black/40 border-2 border-pink-500/50">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Ticket className="w-5 h-5 text-[#E91E63]" />
                  Ticket History
                </CardTitle>
                <CardDescription className="text-gray-400">
                  All your settled lottery tickets
                </CardDescription>
              </CardHeader>
              <CardContent>
                {settledEntries.length === 0 ? (
                  <div className="text-center py-8 md:py-12">
                    <Ticket className="w-12 h-12 md:w-16 md:h-16 text-gray-600 mx-auto mb-4" />
                    <p className="text-gray-400 text-base md:text-xl">
                      No settled tickets yet
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {settledEntries.map((entry) => (
                      <motion.div
                        key={entry.requestId}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        className={`bg-black/30 rounded-xl p-3 md:p-4 border ${
                          entry.status === "won-jackpot"
                            ? "border-yellow-500/50 neon-glow-yellow"
                            : entry.status === "won-consolation"
                            ? "border-cyan-500/50 neon-glow-cyan"
                            : "border-gray-500/30"
                        }`}
                      >
                        <div className="flex items-center justify-between gap-2 md:gap-4">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-1 md:gap-2 mb-2 flex-wrap">
                              <Badge className="bg-pink-500/20 text-pink-300 border-pink-500/50 text-xs">
                                Play #{entry.playId}
                              </Badge>
                              <Badge className="bg-pink-500/20 text-pink-300 border-pink-500/50 text-xs">
                                Round #{entry.roundId}
                              </Badge>
                              {entry.status === "won-jackpot" && (
                                <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-500/50 text-xs">
                                  <Trophy className="w-3 h-3 mr-1" />
                                  JACKPOT!
                                </Badge>
                              )}
                              {entry.status === "won-consolation" && (
                                <Badge className="bg-cyan-500/20 text-cyan-300 border-cyan-500/50 text-xs">
                                  <CheckCircle2 className="w-3 h-3 mr-1" />
                                  Won
                                </Badge>
                              )}
                              {entry.status === "lost" && (
                                <Badge className="bg-gray-500/20 text-gray-400 border-gray-500/50 text-xs">
                                  <XCircle className="w-3 h-3 mr-1" />
                                  No Win
                                </Badge>
                              )}
                            </div>
                            <div className="text-xs md:text-sm text-gray-400 space-y-1">
                              <div className="text-xs">
                                Settled:{" "}
                                {entry.settledDate &&
                                  new Date(entry.settledDate).toLocaleString()}
                              </div>
                              <div className="flex flex-col md:flex-row md:items-center gap-1 md:gap-4">
                                <span>
                                  Cost:{" "}
                                  <span className="text-white">
                                    {formatNumber(entry.cost)} CSPR
                                  </span>
                                </span>
                                {entry.prizeAmount && entry.prizeAmount > 0 && (
                                  <span className="text-yellow-300 neon-text-yellow">
                                    Won: {formatNumber(entry.prizeAmount)} CSPR
                                    🎉
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="text-right flex-shrink-0">
                            {entry.status === "won-jackpot" && (
                              <div className="text-2xl md:text-4xl">🏆</div>
                            )}
                            {entry.status === "won-consolation" && (
                              <div className="text-2xl md:text-4xl">🎉</div>
                            )}
                            {entry.status === "lost" && (
                              <div className="text-2xl md:text-4xl opacity-30">
                                😔
                              </div>
                            )}
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Jackpot Modal */}
      <Dialog open={showJackpotModal} onOpenChange={setShowJackpotModal} modal>
        <DialogContent
          className="bg-black/95 border-4 border-yellow-500 backdrop-blur-xl rounded-3xl max-h-[95vh] overflow-y-auto"
          style={{
            maxWidth: "1200px",
            width: "90vw",
            boxShadow:
              "0 0 40px rgba(234, 179, 8, 0.8), 0 0 80px rgba(234, 179, 8, 0.6), 0 0 120px rgba(234, 179, 8, 0.4), 0 0 160px rgba(234, 179, 8, 0.2)",
          }}
          onInteractOutside={(e) => e.preventDefault()}
        >
          <DialogTitle className="sr-only">Jackpot Winner</DialogTitle>
          <DialogDescription className="sr-only">
            Congratulations! You won the jackpot prize.
          </DialogDescription>
          <div className="text-center py-4 md:py-6 px-3 md:px-8">
            {/* Title with intense glow - Mobile: 2 lines, Desktop: 1 line */}
            <div className="mb-3 md:mb-4">
              {/* Mobile version - 2 lines */}
              <h2
                className="block md:hidden text-yellow-300 leading-tight"
                style={{
                  fontSize: "20px",
                  textShadow:
                    "0 0 20px rgba(253, 224, 71, 1), 0 0 40px rgba(253, 224, 71, 0.9), 0 0 60px rgba(253, 224, 71, 0.7), 0 0 80px rgba(253, 224, 71, 0.5)",
                }}
              >
                💎 YOU WON 💎
                <br />
                THE JACKPOT!
              </h2>

              {/* Desktop version - 1 line */}
              <h2
                className="hidden md:block text-yellow-300"
                style={{
                  fontSize: "64px",
                  textShadow:
                    "0 0 20px rgba(253, 224, 71, 1), 0 0 40px rgba(253, 224, 71, 0.9), 0 0 60px rgba(253, 224, 71, 0.7), 0 0 80px rgba(253, 224, 71, 0.5)",
                }}
              >
                💎 YOU WON THE JACKPOT! 💎
              </h2>
            </div>

            {/* Jackpot Icons - 2 coins with golden round ID coin in middle */}
            <div className="flex justify-center items-center gap-1 md:gap-8 mb-3 md:mb-4">
              {/* All 3 icons visible on all screens */}
              <img
                src={jackpotGif}
                alt="Jackpot"
                className="w-16 h-16 md:w-64 md:h-64 object-contain"
                style={{
                  filter:
                    "drop-shadow(0 0 30px rgba(253, 224, 71, 0.8)) drop-shadow(0 0 60px rgba(253, 224, 71, 0.5))",
                }}
                // animate={{
                //   scale: [1, 1.1, 1],
                //   rotate: [0, 5, -5, 0],
                // }}
                // transition={{
                //   duration: 3,
                //   repeat: Infinity,
                //   ease: "easeInOut",
                // }}
              />

              {/* Golden Round ID Coin - Always visible */}
              <div className="flex justify-center items-center w-20 h-20 md:w-64 md:h-64">
                <svg
                  className="w-full h-full"
                  viewBox="0 0 200 200"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle
                    cx="100"
                    cy="100"
                    r="87.5"
                    fill="url(#jackpotGradient1)"
                    stroke="#FCD34D"
                    strokeWidth="7.5"
                  />
                  <circle
                    cx="100"
                    cy="100"
                    r="70"
                    fill="url(#jackpotGradient2)"
                    stroke="#FCD34D"
                    strokeWidth="5"
                  />
                  <text
                    x="100"
                    y="125"
                    textAnchor="middle"
                    fill="#FCD34D"
                    fontSize="70"
                    fontWeight="bold"
                  >
                    {jackpotEntry?.roundId || 1}
                  </text>
                  <defs>
                    <linearGradient
                      id="jackpotGradient1"
                      x1="100"
                      y1="12.5"
                      x2="100"
                      y2="187.5"
                    >
                      <stop offset="0%" stopColor="#B45309" />
                      <stop offset="100%" stopColor="#78350F" />
                    </linearGradient>
                    <linearGradient
                      id="jackpotGradient2"
                      x1="100"
                      y1="30"
                      x2="100"
                      y2="170"
                    >
                      <stop offset="0%" stopColor="#92400E" />
                      <stop offset="100%" stopColor="#451A03" />
                    </linearGradient>
                  </defs>
                </svg>
              </div>

              <img
                src={jackpotGif}
                alt="Jackpot"
                className="w-16 h-16 md:w-64 md:h-64 object-contain"
                style={{
                  filter:
                    "drop-shadow(0 0 30px rgba(253, 224, 71, 0.8)) drop-shadow(0 0 60px rgba(253, 224, 71, 0.5))",
                }}
                // animate={{
                //   scale: [1, 1.1, 1],
                //   rotate: [0, 5, -5, 0],
                // }}
                // transition={{
                //   duration: 3,
                //   repeat: Infinity,
                //   ease: "easeInOut",
                //   delay: 0.4,
                // }}
              />
            </div>

            {/* "You won" text */}
            <p className="text-white mb-2 text-xl md:text-[32px] font-bold">
              You won
            </p>

            {/* Prize Amount with EXACT RADIATING GLOW from landing page */}
            <motion.div
              className="text-4xl md:text-8xl text-yellow-300 neon-text-yellow mb-4 md:mb-6"
              animate={{
                filter: [
                  "drop-shadow(0 0 10px rgba(253, 224, 71, 0.2)) drop-shadow(0 0 20px rgba(253, 224, 71, 0.2))",
                  "drop-shadow(0 0 30px rgba(253, 224, 71, 1)) drop-shadow(0 0 60px rgba(253, 224, 71, 1))",
                  "drop-shadow(0 0 30px rgba(253, 224, 71, 1)) drop-shadow(0 0 60px rgba(253, 224, 71, 1))",
                  "drop-shadow(0 0 10px rgba(253, 224, 71, 0.2)) drop-shadow(0 0 20px rgba(253, 224, 71, 0.2))",
                ],
              }}
              transition={{
                duration: 5,
                times: [0, 0.4, 0.8, 1],
                repeat: Infinity,
              }}
            >
              {formatNumber(jackpotPrizeAmount)} CSPR
            </motion.div>

            {/* Claim Prize Button */}
            <Button
              onClick={() => setShowJackpotModal(false)}
              className="bg-gradient-to-r from-[#E91E63] to-pink-600 hover:opacity-90 text-white px-6 md:px-8 py-4 md:py-6 cursor-pointer w-full md:w-auto"
            >
              Claim Prize
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Consolation Prize Modal */}
      <Dialog
        open={showConsolationModal}
        onOpenChange={setShowConsolationModal}
        modal
      >
        <DialogContent
          className="bg-black/95 border-4 border-yellow-500 backdrop-blur-xl rounded-3xl"
          style={{
            maxWidth: "600px",
            width: "90vw",
            boxShadow:
              "0 0 30px rgba(234, 179, 8, 0.6), 0 0 60px rgba(234, 179, 8, 0.4), 0 0 90px rgba(234, 179, 8, 0.2)",
          }}
          onInteractOutside={(e) => e.preventDefault()}
        >
          <DialogTitle className="sr-only">
            Consolation Prize Winner
          </DialogTitle>
          <DialogDescription className="sr-only">
            Congratulations! You won a consolation prize of{" "}
            {formatNumber(consolationEntry?.prizeAmount || 0)} CSPR.
          </DialogDescription>
          <div className="text-center py-4 md:py-8 px-2 md:px-4">
            {/* Coin Icon */}
            <div className="flex justify-center mb-3 md:mb-6">
              <svg
                width="60"
                height="60"
                viewBox="0 0 80 80"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="md:w-20 md:h-20"
              >
                <circle
                  cx="40"
                  cy="40"
                  r="35"
                  fill="url(#gradient1)"
                  stroke="#00FFFF"
                  strokeWidth="3"
                />
                <circle
                  cx="40"
                  cy="40"
                  r="28"
                  fill="url(#gradient2)"
                  stroke="#00FFFF"
                  strokeWidth="2"
                />
                <text
                  x="40"
                  y="50"
                  textAnchor="middle"
                  fill="#00FFFF"
                  fontSize="28"
                  fontWeight="bold"
                >
                  {consolationEntry?.roundId || 1}
                </text>
                <defs>
                  <linearGradient id="gradient1" x1="40" y1="5" x2="40" y2="75">
                    <stop offset="0%" stopColor="#006666" />
                    <stop offset="100%" stopColor="#003333" />
                  </linearGradient>
                  <linearGradient
                    id="gradient2"
                    x1="40"
                    y1="12"
                    x2="40"
                    y2="68"
                  >
                    <stop offset="0%" stopColor="#004444" />
                    <stop offset="100%" stopColor="#002222" />
                  </linearGradient>
                </defs>
              </svg>
            </div>

            {/* Title */}
            <h2 className="text-cyan-300 neon-text-cyan mb-1 md:mb-2 text-2xl md:text-5xl">
              🎉 YOU WON! 🎉
            </h2>
            <p className="text-white mb-4 md:mb-6">Consolation Prize</p>

            {/* Prize Amount - GOLDEN with enhanced glow */}
            <div
              className="text-yellow-300 mb-4 md:mb-8 text-4xl md:text-6xl"
              style={{
                textShadow:
                  "0 0 20px rgba(234, 179, 8, 1), 0 0 40px rgba(234, 179, 8, 0.8), 0 0 60px rgba(234, 179, 8, 0.6), 0 0 80px rgba(234, 179, 8, 0.4)",
              }}
            >
              {formatNumber(consolationEntry?.prizeAmount || 0)} CSPR
            </div>

            {/* Message */}
            <p className="text-white text-sm md:text-lg mb-4 md:mb-8 px-2">
              Nice win! Better luck next time for the jackpot! 💰
            </p>

            {/* Button */}
            <Button
              onClick={() => setShowConsolationModal(false)}
              className="bg-gradient-to-r from-[#E91E63] to-pink-600 hover:opacity-90 text-white px-6 md:px-8 py-4 md:py-6 cursor-pointer w-full md:w-auto"
            >
              Claim Prize
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
